// https://github.com/SlushinPS/beach-simulator
// Copyright (C) 2023 Slushy Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.24.1
// source: DungeonChallengeFinishNotify.proto

package gen

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CmdId: 5847
// Obf: JBNHPHABEGG
type DungeonChallengeFinishNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FinishType             ChallengeFinishType             `protobuf:"varint,7,opt,name=finish_type,json=finishType,proto3,enum=ChallengeFinishType" json:"finish_type,omitempty"`
	IsSuccess              bool                            `protobuf:"varint,11,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
	ChallengeIndex         uint32                          `protobuf:"varint,8,opt,name=challenge_index,json=challengeIndex,proto3" json:"challenge_index,omitempty"`
	CurrentValue           uint32                          `protobuf:"varint,14,opt,name=currentValue,proto3" json:"currentValue,omitempty"`
	IsNewRecord            bool                            `protobuf:"varint,15,opt,name=is_new_record,json=isNewRecord,proto3" json:"is_new_record,omitempty"`
	TimeCost               uint32                          `protobuf:"varint,13,opt,name=time_cost,json=timeCost,proto3" json:"time_cost,omitempty"`
	StrengthenPointDataMap map[uint32]*StrengthenPointData `protobuf:"bytes,5,rep,name=strengthen_point_data_map,json=strengthenPointDataMap,proto3" json:"strengthen_point_data_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ChallengeRecordType    uint32                          `protobuf:"varint,4,opt,name=challengeRecordType,proto3" json:"challengeRecordType,omitempty"`
	// Types that are assignable to Detail:
	//
	//	*DungeonChallengeFinishNotify_ChannellerSlabLoopDungeonResultInfo
	//	*DungeonChallengeFinishNotify_EffigyChallengeDungeonResultInfo
	//	*DungeonChallengeFinishNotify_PotionDungeonResultInfo
	//	*DungeonChallengeFinishNotify_CustomDungeonResultInfo
	Detail isDungeonChallengeFinishNotify_Detail `protobuf_oneof:"detail"`
}

func (x *DungeonChallengeFinishNotify) Reset() {
	*x = DungeonChallengeFinishNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DungeonChallengeFinishNotify_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonChallengeFinishNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonChallengeFinishNotify) ProtoMessage() {}

func (x *DungeonChallengeFinishNotify) ProtoReflect() protoreflect.Message {
	mi := &file_DungeonChallengeFinishNotify_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonChallengeFinishNotify.ProtoReflect.Descriptor instead.
func (*DungeonChallengeFinishNotify) Descriptor() ([]byte, []int) {
	return file_DungeonChallengeFinishNotify_proto_rawDescGZIP(), []int{0}
}

func (x *DungeonChallengeFinishNotify) GetFinishType() ChallengeFinishType {
	if x != nil {
		return x.FinishType
	}
	return ChallengeFinishType_CHALLENGE_FINISH_TYPE_NONE
}

func (x *DungeonChallengeFinishNotify) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

func (x *DungeonChallengeFinishNotify) GetChallengeIndex() uint32 {
	if x != nil {
		return x.ChallengeIndex
	}
	return 0
}

func (x *DungeonChallengeFinishNotify) GetCurrentValue() uint32 {
	if x != nil {
		return x.CurrentValue
	}
	return 0
}

func (x *DungeonChallengeFinishNotify) GetIsNewRecord() bool {
	if x != nil {
		return x.IsNewRecord
	}
	return false
}

func (x *DungeonChallengeFinishNotify) GetTimeCost() uint32 {
	if x != nil {
		return x.TimeCost
	}
	return 0
}

func (x *DungeonChallengeFinishNotify) GetStrengthenPointDataMap() map[uint32]*StrengthenPointData {
	if x != nil {
		return x.StrengthenPointDataMap
	}
	return nil
}

func (x *DungeonChallengeFinishNotify) GetChallengeRecordType() uint32 {
	if x != nil {
		return x.ChallengeRecordType
	}
	return 0
}

func (m *DungeonChallengeFinishNotify) GetDetail() isDungeonChallengeFinishNotify_Detail {
	if m != nil {
		return m.Detail
	}
	return nil
}

func (x *DungeonChallengeFinishNotify) GetChannellerSlabLoopDungeonResultInfo() *ChannellerSlabLoopDungeonResultInfo {
	if x, ok := x.GetDetail().(*DungeonChallengeFinishNotify_ChannellerSlabLoopDungeonResultInfo); ok {
		return x.ChannellerSlabLoopDungeonResultInfo
	}
	return nil
}

func (x *DungeonChallengeFinishNotify) GetEffigyChallengeDungeonResultInfo() *EffigyChallengeDungeonResultInfo {
	if x, ok := x.GetDetail().(*DungeonChallengeFinishNotify_EffigyChallengeDungeonResultInfo); ok {
		return x.EffigyChallengeDungeonResultInfo
	}
	return nil
}

func (x *DungeonChallengeFinishNotify) GetPotionDungeonResultInfo() *PotionDungeonResultInfo {
	if x, ok := x.GetDetail().(*DungeonChallengeFinishNotify_PotionDungeonResultInfo); ok {
		return x.PotionDungeonResultInfo
	}
	return nil
}

func (x *DungeonChallengeFinishNotify) GetCustomDungeonResultInfo() *CustomDungeonResultInfo {
	if x, ok := x.GetDetail().(*DungeonChallengeFinishNotify_CustomDungeonResultInfo); ok {
		return x.CustomDungeonResultInfo
	}
	return nil
}

type isDungeonChallengeFinishNotify_Detail interface {
	isDungeonChallengeFinishNotify_Detail()
}

type DungeonChallengeFinishNotify_ChannellerSlabLoopDungeonResultInfo struct {
	ChannellerSlabLoopDungeonResultInfo *ChannellerSlabLoopDungeonResultInfo `protobuf:"bytes,1111,opt,name=channeller_slab_loop_dungeon_result_info,json=channellerSlabLoopDungeonResultInfo,proto3,oneof"`
}

type DungeonChallengeFinishNotify_EffigyChallengeDungeonResultInfo struct {
	EffigyChallengeDungeonResultInfo *EffigyChallengeDungeonResultInfo `protobuf:"bytes,351,opt,name=effigy_challenge_dungeon_result_info,json=effigyChallengeDungeonResultInfo,proto3,oneof"`
}

type DungeonChallengeFinishNotify_PotionDungeonResultInfo struct {
	PotionDungeonResultInfo *PotionDungeonResultInfo `protobuf:"bytes,339,opt,name=potion_dungeon_result_info,json=potionDungeonResultInfo,proto3,oneof"`
}

type DungeonChallengeFinishNotify_CustomDungeonResultInfo struct {
	CustomDungeonResultInfo *CustomDungeonResultInfo `protobuf:"bytes,915,opt,name=custom_dungeon_result_info,json=customDungeonResultInfo,proto3,oneof"`
}

func (*DungeonChallengeFinishNotify_ChannellerSlabLoopDungeonResultInfo) isDungeonChallengeFinishNotify_Detail() {
}

func (*DungeonChallengeFinishNotify_EffigyChallengeDungeonResultInfo) isDungeonChallengeFinishNotify_Detail() {
}

func (*DungeonChallengeFinishNotify_PotionDungeonResultInfo) isDungeonChallengeFinishNotify_Detail() {
}

func (*DungeonChallengeFinishNotify_CustomDungeonResultInfo) isDungeonChallengeFinishNotify_Detail() {
}

var File_DungeonChallengeFinishNotify_proto protoreflect.FileDescriptor

var file_DungeonChallengeFinishNotify_proto_rawDesc = []byte{
	0x0a, 0x22, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x19, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x65, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x62, 0x4c, 0x6f, 0x6f, 0x70, 0x44, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x45, 0x66, 0x66, 0x69, 0x67, 0x79, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x50,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbf, 0x07, 0x0a, 0x1c,
	0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x35, 0x0a, 0x0b,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x73, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x73, 0x74,
	0x12, 0x74, 0x0a, 0x19, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x65, 0x6e, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x65, 0x6e, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x16,
	0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x65, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x13, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x7e, 0x0a, 0x28, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x61, 0x62, 0x5f, 0x6c, 0x6f, 0x6f, 0x70,
	0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0xd7, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x62, 0x4c, 0x6f, 0x6f, 0x70,
	0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x00, 0x52, 0x23, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x53,
	0x6c, 0x61, 0x62, 0x4c, 0x6f, 0x6f, 0x70, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x74, 0x0a, 0x24, 0x65, 0x66, 0x66, 0x69,
	0x67, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0xdf, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x45, 0x66, 0x66, 0x69, 0x67, 0x79,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x20, 0x65, 0x66,
	0x66, 0x69, 0x67, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x44, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x58,
	0x0a, 0x1a, 0x70, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xd3, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x50, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52,
	0x17, 0x70, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x58, 0x0a, 0x1a, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x93, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x17, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x1a, 0x5f, 0x0a, 0x1b, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x65, 0x6e,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x65, 0x6e, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x06, 0x5a,
	0x04, 0x2f, 0x67, 0x65, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_DungeonChallengeFinishNotify_proto_rawDescOnce sync.Once
	file_DungeonChallengeFinishNotify_proto_rawDescData = file_DungeonChallengeFinishNotify_proto_rawDesc
)

func file_DungeonChallengeFinishNotify_proto_rawDescGZIP() []byte {
	file_DungeonChallengeFinishNotify_proto_rawDescOnce.Do(func() {
		file_DungeonChallengeFinishNotify_proto_rawDescData = protoimpl.X.CompressGZIP(file_DungeonChallengeFinishNotify_proto_rawDescData)
	})
	return file_DungeonChallengeFinishNotify_proto_rawDescData
}

var file_DungeonChallengeFinishNotify_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_DungeonChallengeFinishNotify_proto_goTypes = []interface{}{
	(*DungeonChallengeFinishNotify)(nil), // 0: DungeonChallengeFinishNotify
	nil,                                  // 1: DungeonChallengeFinishNotify.StrengthenPointDataMapEntry
	(ChallengeFinishType)(0),             // 2: ChallengeFinishType
	(*ChannellerSlabLoopDungeonResultInfo)(nil), // 3: ChannellerSlabLoopDungeonResultInfo
	(*EffigyChallengeDungeonResultInfo)(nil),    // 4: EffigyChallengeDungeonResultInfo
	(*PotionDungeonResultInfo)(nil),             // 5: PotionDungeonResultInfo
	(*CustomDungeonResultInfo)(nil),             // 6: CustomDungeonResultInfo
	(*StrengthenPointData)(nil),                 // 7: StrengthenPointData
}
var file_DungeonChallengeFinishNotify_proto_depIdxs = []int32{
	2, // 0: DungeonChallengeFinishNotify.finish_type:type_name -> ChallengeFinishType
	1, // 1: DungeonChallengeFinishNotify.strengthen_point_data_map:type_name -> DungeonChallengeFinishNotify.StrengthenPointDataMapEntry
	3, // 2: DungeonChallengeFinishNotify.channeller_slab_loop_dungeon_result_info:type_name -> ChannellerSlabLoopDungeonResultInfo
	4, // 3: DungeonChallengeFinishNotify.effigy_challenge_dungeon_result_info:type_name -> EffigyChallengeDungeonResultInfo
	5, // 4: DungeonChallengeFinishNotify.potion_dungeon_result_info:type_name -> PotionDungeonResultInfo
	6, // 5: DungeonChallengeFinishNotify.custom_dungeon_result_info:type_name -> CustomDungeonResultInfo
	7, // 6: DungeonChallengeFinishNotify.StrengthenPointDataMapEntry.value:type_name -> StrengthenPointData
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_DungeonChallengeFinishNotify_proto_init() }
func file_DungeonChallengeFinishNotify_proto_init() {
	if File_DungeonChallengeFinishNotify_proto != nil {
		return
	}
	file_ChallengeFinishType_proto_init()
	file_StrengthenPointData_proto_init()
	file_ChannellerSlabLoopDungeonResultInfo_proto_init()
	file_EffigyChallengeDungeonResultInfo_proto_init()
	file_PotionDungeonResultInfo_proto_init()
	file_CustomDungeonResultInfo_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_DungeonChallengeFinishNotify_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonChallengeFinishNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_DungeonChallengeFinishNotify_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*DungeonChallengeFinishNotify_ChannellerSlabLoopDungeonResultInfo)(nil),
		(*DungeonChallengeFinishNotify_EffigyChallengeDungeonResultInfo)(nil),
		(*DungeonChallengeFinishNotify_PotionDungeonResultInfo)(nil),
		(*DungeonChallengeFinishNotify_CustomDungeonResultInfo)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_DungeonChallengeFinishNotify_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_DungeonChallengeFinishNotify_proto_goTypes,
		DependencyIndexes: file_DungeonChallengeFinishNotify_proto_depIdxs,
		MessageInfos:      file_DungeonChallengeFinishNotify_proto_msgTypes,
	}.Build()
	File_DungeonChallengeFinishNotify_proto = out.File
	file_DungeonChallengeFinishNotify_proto_rawDesc = nil
	file_DungeonChallengeFinishNotify_proto_goTypes = nil
	file_DungeonChallengeFinishNotify_proto_depIdxs = nil
}
