// https://github.com/SlushinPS/beach-simulator
// Copyright (C) 2023 Slushy Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.24.1
// source: MultistagePlayInfo.proto

package gen

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Obf: EGPGHBCHGMA
type MultistagePlayInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeginTime  uint32 `protobuf:"varint,8,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty"`
	StageIndex uint32 `protobuf:"varint,6,opt,name=stage_index,json=stageIndex,proto3" json:"stage_index,omitempty"`
	StageType  uint32 `protobuf:"varint,15,opt,name=stage_type,json=stageType,proto3" json:"stage_type,omitempty"`
	PlayType   uint32 `protobuf:"varint,7,opt,name=play_type,json=playType,proto3" json:"play_type,omitempty"`
	Duration   uint32 `protobuf:"varint,9,opt,name=duration,proto3" json:"duration,omitempty"`
	GroupId    uint32 `protobuf:"varint,4,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	PlayIndex  uint32 `protobuf:"varint,11,opt,name=play_index,json=playIndex,proto3" json:"play_index,omitempty"`
	// Types that are assignable to Detail:
	//
	//	*MultistagePlayInfo_MechanicusInfo
	//	*MultistagePlayInfo_FleurFairInfo
	//	*MultistagePlayInfo_HideAndSeekInfo
	//	*MultistagePlayInfo_ChessInfo
	//	*MultistagePlayInfo_IrodoriChessInfo
	//	*MultistagePlayInfo_CharAmusementInfo
	//	*MultistagePlayInfo_BrickBreakerInfo
	//	*MultistagePlayInfo_CoinCollectInfo
	//	*MultistagePlayInfo_LanV3BoatInfo
	//	*MultistagePlayInfo_FleurFairV2PacmanInfo
	//	*MultistagePlayInfo_TargetShootingInfo
	Detail isMultistagePlayInfo_Detail `protobuf_oneof:"detail"`
}

func (x *MultistagePlayInfo) Reset() {
	*x = MultistagePlayInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MultistagePlayInfo_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultistagePlayInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultistagePlayInfo) ProtoMessage() {}

func (x *MultistagePlayInfo) ProtoReflect() protoreflect.Message {
	mi := &file_MultistagePlayInfo_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultistagePlayInfo.ProtoReflect.Descriptor instead.
func (*MultistagePlayInfo) Descriptor() ([]byte, []int) {
	return file_MultistagePlayInfo_proto_rawDescGZIP(), []int{0}
}

func (x *MultistagePlayInfo) GetBeginTime() uint32 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *MultistagePlayInfo) GetStageIndex() uint32 {
	if x != nil {
		return x.StageIndex
	}
	return 0
}

func (x *MultistagePlayInfo) GetStageType() uint32 {
	if x != nil {
		return x.StageType
	}
	return 0
}

func (x *MultistagePlayInfo) GetPlayType() uint32 {
	if x != nil {
		return x.PlayType
	}
	return 0
}

func (x *MultistagePlayInfo) GetDuration() uint32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *MultistagePlayInfo) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *MultistagePlayInfo) GetPlayIndex() uint32 {
	if x != nil {
		return x.PlayIndex
	}
	return 0
}

func (m *MultistagePlayInfo) GetDetail() isMultistagePlayInfo_Detail {
	if m != nil {
		return m.Detail
	}
	return nil
}

func (x *MultistagePlayInfo) GetMechanicusInfo() *InBattleMechanicusInfo {
	if x, ok := x.GetDetail().(*MultistagePlayInfo_MechanicusInfo); ok {
		return x.MechanicusInfo
	}
	return nil
}

func (x *MultistagePlayInfo) GetFleurFairInfo() *InBattleFleurFairInfo {
	if x, ok := x.GetDetail().(*MultistagePlayInfo_FleurFairInfo); ok {
		return x.FleurFairInfo
	}
	return nil
}

func (x *MultistagePlayInfo) GetHideAndSeekInfo() *HideAndSeekStageInfo {
	if x, ok := x.GetDetail().(*MultistagePlayInfo_HideAndSeekInfo); ok {
		return x.HideAndSeekInfo
	}
	return nil
}

func (x *MultistagePlayInfo) GetChessInfo() *InBattleChessInfo {
	if x, ok := x.GetDetail().(*MultistagePlayInfo_ChessInfo); ok {
		return x.ChessInfo
	}
	return nil
}

func (x *MultistagePlayInfo) GetIrodoriChessInfo() *InBattleIrodoriChessInfo {
	if x, ok := x.GetDetail().(*MultistagePlayInfo_IrodoriChessInfo); ok {
		return x.IrodoriChessInfo
	}
	return nil
}

func (x *MultistagePlayInfo) GetCharAmusementInfo() *CharAmusementInfo {
	if x, ok := x.GetDetail().(*MultistagePlayInfo_CharAmusementInfo); ok {
		return x.CharAmusementInfo
	}
	return nil
}

func (x *MultistagePlayInfo) GetBrickBreakerInfo() *BrickBreakerStageInfo {
	if x, ok := x.GetDetail().(*MultistagePlayInfo_BrickBreakerInfo); ok {
		return x.BrickBreakerInfo
	}
	return nil
}

func (x *MultistagePlayInfo) GetCoinCollectInfo() *CoinCollectStageInfo {
	if x, ok := x.GetDetail().(*MultistagePlayInfo_CoinCollectInfo); ok {
		return x.CoinCollectInfo
	}
	return nil
}

func (x *MultistagePlayInfo) GetLanV3BoatInfo() *LanV3BoatStageInfo {
	if x, ok := x.GetDetail().(*MultistagePlayInfo_LanV3BoatInfo); ok {
		return x.LanV3BoatInfo
	}
	return nil
}

func (x *MultistagePlayInfo) GetFleurFairV2PacmanInfo() *FleurFairV2PacmanStageInfo {
	if x, ok := x.GetDetail().(*MultistagePlayInfo_FleurFairV2PacmanInfo); ok {
		return x.FleurFairV2PacmanInfo
	}
	return nil
}

func (x *MultistagePlayInfo) GetTargetShootingInfo() *TargetShootingInfo {
	if x, ok := x.GetDetail().(*MultistagePlayInfo_TargetShootingInfo); ok {
		return x.TargetShootingInfo
	}
	return nil
}

type isMultistagePlayInfo_Detail interface {
	isMultistagePlayInfo_Detail()
}

type MultistagePlayInfo_MechanicusInfo struct {
	MechanicusInfo *InBattleMechanicusInfo `protobuf:"bytes,429,opt,name=mechanicus_info,json=mechanicusInfo,proto3,oneof"`
}

type MultistagePlayInfo_FleurFairInfo struct {
	FleurFairInfo *InBattleFleurFairInfo `protobuf:"bytes,1722,opt,name=fleur_fair_info,json=fleurFairInfo,proto3,oneof"`
}

type MultistagePlayInfo_HideAndSeekInfo struct {
	HideAndSeekInfo *HideAndSeekStageInfo `protobuf:"bytes,1717,opt,name=hide_and_seek_info,json=hideAndSeekInfo,proto3,oneof"`
}

type MultistagePlayInfo_ChessInfo struct {
	ChessInfo *InBattleChessInfo `protobuf:"bytes,1610,opt,name=chess_info,json=chessInfo,proto3,oneof"`
}

type MultistagePlayInfo_IrodoriChessInfo struct {
	IrodoriChessInfo *InBattleIrodoriChessInfo `protobuf:"bytes,753,opt,name=irodori_chess_info,json=irodoriChessInfo,proto3,oneof"`
}

type MultistagePlayInfo_CharAmusementInfo struct {
	CharAmusementInfo *CharAmusementInfo `protobuf:"bytes,30,opt,name=char_amusement_info,json=charAmusementInfo,proto3,oneof"`
}

type MultistagePlayInfo_BrickBreakerInfo struct {
	BrickBreakerInfo *BrickBreakerStageInfo `protobuf:"bytes,1228,opt,name=brick_breaker_info,json=brickBreakerInfo,proto3,oneof"`
}

type MultistagePlayInfo_CoinCollectInfo struct {
	CoinCollectInfo *CoinCollectStageInfo `protobuf:"bytes,424,opt,name=coin_collect_info,json=coinCollectInfo,proto3,oneof"`
}

type MultistagePlayInfo_LanV3BoatInfo struct {
	LanV3BoatInfo *LanV3BoatStageInfo `protobuf:"bytes,691,opt,name=lan_v3_boat_info,json=lanV3BoatInfo,proto3,oneof"`
}

type MultistagePlayInfo_FleurFairV2PacmanInfo struct {
	FleurFairV2PacmanInfo *FleurFairV2PacmanStageInfo `protobuf:"bytes,1371,opt,name=fleur_fair_v2_pacman_info,json=fleurFairV2PacmanInfo,proto3,oneof"`
}

type MultistagePlayInfo_TargetShootingInfo struct {
	TargetShootingInfo *TargetShootingInfo `protobuf:"bytes,1191,opt,name=target_shooting_info,json=targetShootingInfo,proto3,oneof"`
}

func (*MultistagePlayInfo_MechanicusInfo) isMultistagePlayInfo_Detail() {}

func (*MultistagePlayInfo_FleurFairInfo) isMultistagePlayInfo_Detail() {}

func (*MultistagePlayInfo_HideAndSeekInfo) isMultistagePlayInfo_Detail() {}

func (*MultistagePlayInfo_ChessInfo) isMultistagePlayInfo_Detail() {}

func (*MultistagePlayInfo_IrodoriChessInfo) isMultistagePlayInfo_Detail() {}

func (*MultistagePlayInfo_CharAmusementInfo) isMultistagePlayInfo_Detail() {}

func (*MultistagePlayInfo_BrickBreakerInfo) isMultistagePlayInfo_Detail() {}

func (*MultistagePlayInfo_CoinCollectInfo) isMultistagePlayInfo_Detail() {}

func (*MultistagePlayInfo_LanV3BoatInfo) isMultistagePlayInfo_Detail() {}

func (*MultistagePlayInfo_FleurFairV2PacmanInfo) isMultistagePlayInfo_Detail() {}

func (*MultistagePlayInfo_TargetShootingInfo) isMultistagePlayInfo_Detail() {}

var File_MultistagePlayInfo_proto protoreflect.FileDescriptor

var file_MultistagePlayInfo_proto_rawDesc = []byte{
	0x0a, 0x18, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x74, 0x61, 0x67, 0x65, 0x50, 0x6c, 0x61, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x49, 0x6e, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x75, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x49, 0x6e, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x46, 0x6c, 0x65, 0x75, 0x72, 0x46, 0x61, 0x69, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x48, 0x69, 0x64, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x65,
	0x65, 0x6b, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x17, 0x49, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x73, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x49, 0x6e, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x43, 0x68, 0x65, 0x73, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x43, 0x68, 0x61, 0x72,
	0x41, 0x6d, 0x75, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x42, 0x72, 0x69, 0x63, 0x6b, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1a, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x4c, 0x61,
	0x6e, 0x56, 0x33, 0x42, 0x6f, 0x61, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x46, 0x6c, 0x65, 0x75, 0x72, 0x46, 0x61, 0x69,
	0x72, 0x56, 0x32, 0x50, 0x61, 0x63, 0x6d, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x53, 0x68, 0x6f, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xfb, 0x07, 0x0a, 0x12, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x67,
	0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62,
	0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x43, 0x0a, 0x0f, 0x6d,
	0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x75, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xad,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x49, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00,
	0x52, 0x0e, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x41, 0x0a, 0x0f, 0x66, 0x6c, 0x65, 0x75, 0x72, 0x5f, 0x66, 0x61, 0x69, 0x72, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0xba, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x49, 0x6e, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x46, 0x6c, 0x65, 0x75, 0x72, 0x46, 0x61, 0x69, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x00, 0x52, 0x0d, 0x66, 0x6c, 0x65, 0x75, 0x72, 0x46, 0x61, 0x69, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x45, 0x0a, 0x12, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f,
	0x73, 0x65, 0x65, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xb5, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x48, 0x69, 0x64, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x65, 0x6b, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0f, 0x68, 0x69, 0x64, 0x65, 0x41,
	0x6e, 0x64, 0x53, 0x65, 0x65, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x0a, 0x63, 0x68,
	0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xca, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x49, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x73, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x09, 0x63, 0x68, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x4a, 0x0a, 0x12, 0x69, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x5f, 0x63, 0x68, 0x65, 0x73,
	0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xf1, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x49, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x43,
	0x68, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x10, 0x69, 0x72, 0x6f, 0x64,
	0x6f, 0x72, 0x69, 0x43, 0x68, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x44, 0x0a, 0x13,
	0x63, 0x68, 0x61, 0x72, 0x5f, 0x61, 0x6d, 0x75, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43, 0x68, 0x61, 0x72,
	0x41, 0x6d, 0x75, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52,
	0x11, 0x63, 0x68, 0x61, 0x72, 0x41, 0x6d, 0x75, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x47, 0x0a, 0x12, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x5f, 0x62, 0x72, 0x65, 0x61,
	0x6b, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xcc, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x42, 0x72, 0x69, 0x63, 0x6b, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x10, 0x62, 0x72, 0x69, 0x63, 0x6b,
	0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x44, 0x0a, 0x11, 0x63,
	0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0xa8, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00,
	0x52, 0x0f, 0x63, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x3f, 0x0a, 0x10, 0x6c, 0x61, 0x6e, 0x5f, 0x76, 0x33, 0x5f, 0x62, 0x6f, 0x61, 0x74,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xb3, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4c,
	0x61, 0x6e, 0x56, 0x33, 0x42, 0x6f, 0x61, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x00, 0x52, 0x0d, 0x6c, 0x61, 0x6e, 0x56, 0x33, 0x42, 0x6f, 0x61, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x58, 0x0a, 0x19, 0x66, 0x6c, 0x65, 0x75, 0x72, 0x5f, 0x66, 0x61, 0x69, 0x72,
	0x5f, 0x76, 0x32, 0x5f, 0x70, 0x61, 0x63, 0x6d, 0x61, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0xdb, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x46, 0x6c, 0x65, 0x75, 0x72, 0x46, 0x61,
	0x69, 0x72, 0x56, 0x32, 0x50, 0x61, 0x63, 0x6d, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x15, 0x66, 0x6c, 0x65, 0x75, 0x72, 0x46, 0x61, 0x69, 0x72,
	0x56, 0x32, 0x50, 0x61, 0x63, 0x6d, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x48, 0x0a, 0x14,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x68, 0x6f, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0xa7, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x53, 0x68, 0x6f, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x00, 0x52, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x68, 0x6f, 0x6f, 0x74, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x08, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x42, 0x06, 0x5a, 0x04, 0x2f, 0x67, 0x65, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_MultistagePlayInfo_proto_rawDescOnce sync.Once
	file_MultistagePlayInfo_proto_rawDescData = file_MultistagePlayInfo_proto_rawDesc
)

func file_MultistagePlayInfo_proto_rawDescGZIP() []byte {
	file_MultistagePlayInfo_proto_rawDescOnce.Do(func() {
		file_MultistagePlayInfo_proto_rawDescData = protoimpl.X.CompressGZIP(file_MultistagePlayInfo_proto_rawDescData)
	})
	return file_MultistagePlayInfo_proto_rawDescData
}

var file_MultistagePlayInfo_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_MultistagePlayInfo_proto_goTypes = []interface{}{
	(*MultistagePlayInfo)(nil),         // 0: MultistagePlayInfo
	(*InBattleMechanicusInfo)(nil),     // 1: InBattleMechanicusInfo
	(*InBattleFleurFairInfo)(nil),      // 2: InBattleFleurFairInfo
	(*HideAndSeekStageInfo)(nil),       // 3: HideAndSeekStageInfo
	(*InBattleChessInfo)(nil),          // 4: InBattleChessInfo
	(*InBattleIrodoriChessInfo)(nil),   // 5: InBattleIrodoriChessInfo
	(*CharAmusementInfo)(nil),          // 6: CharAmusementInfo
	(*BrickBreakerStageInfo)(nil),      // 7: BrickBreakerStageInfo
	(*CoinCollectStageInfo)(nil),       // 8: CoinCollectStageInfo
	(*LanV3BoatStageInfo)(nil),         // 9: LanV3BoatStageInfo
	(*FleurFairV2PacmanStageInfo)(nil), // 10: FleurFairV2PacmanStageInfo
	(*TargetShootingInfo)(nil),         // 11: TargetShootingInfo
}
var file_MultistagePlayInfo_proto_depIdxs = []int32{
	1,  // 0: MultistagePlayInfo.mechanicus_info:type_name -> InBattleMechanicusInfo
	2,  // 1: MultistagePlayInfo.fleur_fair_info:type_name -> InBattleFleurFairInfo
	3,  // 2: MultistagePlayInfo.hide_and_seek_info:type_name -> HideAndSeekStageInfo
	4,  // 3: MultistagePlayInfo.chess_info:type_name -> InBattleChessInfo
	5,  // 4: MultistagePlayInfo.irodori_chess_info:type_name -> InBattleIrodoriChessInfo
	6,  // 5: MultistagePlayInfo.char_amusement_info:type_name -> CharAmusementInfo
	7,  // 6: MultistagePlayInfo.brick_breaker_info:type_name -> BrickBreakerStageInfo
	8,  // 7: MultistagePlayInfo.coin_collect_info:type_name -> CoinCollectStageInfo
	9,  // 8: MultistagePlayInfo.lan_v3_boat_info:type_name -> LanV3BoatStageInfo
	10, // 9: MultistagePlayInfo.fleur_fair_v2_pacman_info:type_name -> FleurFairV2PacmanStageInfo
	11, // 10: MultistagePlayInfo.target_shooting_info:type_name -> TargetShootingInfo
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_MultistagePlayInfo_proto_init() }
func file_MultistagePlayInfo_proto_init() {
	if File_MultistagePlayInfo_proto != nil {
		return
	}
	file_InBattleMechanicusInfo_proto_init()
	file_InBattleFleurFairInfo_proto_init()
	file_HideAndSeekStageInfo_proto_init()
	file_InBattleChessInfo_proto_init()
	file_InBattleIrodoriChessInfo_proto_init()
	file_CharAmusementInfo_proto_init()
	file_BrickBreakerStageInfo_proto_init()
	file_CoinCollectStageInfo_proto_init()
	file_LanV3BoatStageInfo_proto_init()
	file_FleurFairV2PacmanStageInfo_proto_init()
	file_TargetShootingInfo_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_MultistagePlayInfo_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultistagePlayInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_MultistagePlayInfo_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*MultistagePlayInfo_MechanicusInfo)(nil),
		(*MultistagePlayInfo_FleurFairInfo)(nil),
		(*MultistagePlayInfo_HideAndSeekInfo)(nil),
		(*MultistagePlayInfo_ChessInfo)(nil),
		(*MultistagePlayInfo_IrodoriChessInfo)(nil),
		(*MultistagePlayInfo_CharAmusementInfo)(nil),
		(*MultistagePlayInfo_BrickBreakerInfo)(nil),
		(*MultistagePlayInfo_CoinCollectInfo)(nil),
		(*MultistagePlayInfo_LanV3BoatInfo)(nil),
		(*MultistagePlayInfo_FleurFairV2PacmanInfo)(nil),
		(*MultistagePlayInfo_TargetShootingInfo)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_MultistagePlayInfo_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_MultistagePlayInfo_proto_goTypes,
		DependencyIndexes: file_MultistagePlayInfo_proto_depIdxs,
		MessageInfos:      file_MultistagePlayInfo_proto_msgTypes,
	}.Build()
	File_MultistagePlayInfo_proto = out.File
	file_MultistagePlayInfo_proto_rawDesc = nil
	file_MultistagePlayInfo_proto_goTypes = nil
	file_MultistagePlayInfo_proto_depIdxs = nil
}
